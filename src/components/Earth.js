/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: PatelDev (https://sketchfab.com/PatelDev)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/earth-f7a76c63ff1846afb2d606e5c8369c15
title: Earth
*/

import React, { useState, useCallback, Suspense } from 'react'
import { useGLTF } from '@react-three/drei'
import { useSpring, a } from '@react-spring/three';
import Airplane from "./Airplane";

import { isPlane } from "../utils";

const LONGITUDE_OFFSET = -Math.PI / 2;

export default function Model({ marker }) {
  const { lat, lng, rotation } = marker;

  const markerIsPlane = isPlane(marker);

  const lngRot = -(lng * Math.PI / 180) + LONGITUDE_OFFSET;
  const latRot = (lat * Math.PI / 180);

  const [zoom, setZoom] = useState(false);

  const { scale, position, earthRotation } = useSpring({
    scale: zoom ? [4, 4, 4] : [2, 2, 2],
    position: zoom ? [0, 0, 4.5] : [0, 0, 2.25],
    earthRotation: [latRot, lngRot, 0],
  });


  const earthClick = useCallback(() => {
    setZoom((prev) => !prev);
  }, [])

  const { nodes, materials } = useGLTF('/earth.gltf')

  const hasCoordinates = lat && lng;
  return (
    <>
      <a.group onClick={earthClick} rotation={earthRotation} scale={scale} dispose={null}>
        <group rotation={[-Math.PI / 2, 0, 0]}>
          <group rotation={[Math.PI / 2, 0, 0]}>
            <group scale={[1.13, 1.13, 1.13]}>
              <mesh geometry={nodes.mesh_0.geometry} material={materials['Scene_-_Root']} />
            </group>
          </group>
        </group>
      </a.group>
      {hasCoordinates && (
        <>
          {
            markerIsPlane ? (
              <>
                <Suspense fallback={null}>
                  <Airplane position={position} planeRotation={rotation} />
                </Suspense>
              </>
            ) : (
              < a.mesh position={position} >
                <a.sphereGeometry args={[0.01, 16, 16]} />
                <meshStandardMaterial color={'orange'} />
              </a.mesh>
            )
          }
        </>
      )}
    </>
  )
}

useGLTF.preload('/scene.gltf')
